          '''
            for vehiculo in transporte:
                transporte_id = self.env['malkion_transport'].search([('name', '=', vehiculo.text)], limit=1)
                if transporte_id:
                    self.transporte_ids = [(4, transporte_id.id)]
            '''
''' Restos de intentos como referencia:
            # Asignar roles y generar campos dinámicos
            roles = xml_root.findall('roles_necesarios/role')
            for role in roles:
                rol_name = role.find('role_name').text
                cantidad = int(role.find('cantidad').text)

                # Buscar el rol en la base de datos
                rol_id = self.env['hr.job'].search([('name', '=', rol_name)], limit=1)
                
                if rol_id:
                    # Crear los registros de empleados necesarios según la cantidad
                    for _ in range(cantidad):
                        self.empleados_roles = [(0, 0, {
                            'role_id': rol_id.id,
                            # El campo `empleado_id` puede dejarse vacío para selección posterior
                        })]
                else:
                    raise ValidationError(f"El rol '{rol_name}' no está registrado en la base de datos.")

            # Asignar equipo
            equipo = xml_root.findall('equipo_necesario/equipo')
            for equipo_tipo in equipo:
                equipo_id = self.env['malkion_equipo'].search([('name', '=', equipo_tipo.text)], limit=1)
                if equipo_id:
                    self.equipo_ids = [(4, equipo_id.id)]

    @api.model
    def cargar_plantilla(self, xml_data):
        # Parsear el XML
        xml_root = ET.fromstring(xml_data)

        # Leer los roles y cantidades del XML
        roles = xml_root.findall('roles_necesarios/role')
        for role in roles:
            rol_name = role.find('role_name').text
            cantidad = int(role.find('cantidad').text)

            # Buscar el rol en la base de datos
            rol_id = self.env['hr.job'].search([('name', '=', rol_name)], limit=1)
            
            if rol_id:
                # Crear los registros de empleados necesarios según la cantidad
                for _ in range(cantidad):
                    # Crear un registro en `roles_empleados` para cada rol y su correspondiente empleado
                    self.roles_empleados = [(0, 0, {
                        'role_id': rol_id.id,
                        # En este punto, el campo `empleado_id` puede dejarse vacío para seleccionar más tarde
                    })]
            else:
                # Si no se encuentra el rol, lanzar un error
                raise ValidationError(f"El rol '{rol_name}' no está registrado en la base de datos.")
        
        return True

    roles_empleados = fields.One2many('malkion.orden_trabajo.empleado', 'orden_trabajo_id', string="Empleados por Rol")

    @api.model
    def crear_roles_y_empleados(self, xml_data):
        # Parsear el XML
        xml_root = ET.fromstring(xml_data)

        # Procesar roles y cantidades
        roles = xml_root.findall('roles_necesarios/role')
        for role in roles:
            rol_name = role.find('role_name').text
            cantidad = int(role.find('cantidad').text)

            # Buscar el rol en la base de datos
            rol_id = self.env['hr.job'].search([('name', '=', rol_name)], limit=1)
            
            if rol_id:
                # Crear los registros de empleados necesarios
                for _ in range(cantidad):
                    self.roles_empleados = [(0, 0, {
                        'role_id': rol_id.id,
                        
                    })]
            else:
                raise ValidationError(f"El rol '{rol_name}' no está registrado en la base de datos.")

        return True

class EmpleadoRol(models.Model):
    _name = 'malkion.orden_trabajo.empleado'
    _description = 'Empleado por Rol'

    orden_trabajo_id = fields.Many2one('malkion_orden_trabajo', string="Orden de Trabajo")
    role_id = fields.Many2one('hr.job', string="Rol")

    empleado_id = fields.Many2one('hr.employee', string="Empleado", domain="[('job_id', '=', role_id)]")
                    <!-- Roles Necesarios -->
                    <group string="Roles Necesarios">
                        <field name="roles_empleados">
                            <form>
                                <group>
                                    <field name="role_id" string="Rol"/>
                                    <field name="empleado_id" string="Empleado"/>
                                </group>
                            </form>
                        </field>
                    </group>

                                ''' Funciona, pero sin cantidad
            # Asignar roles
            roles = xml_root.findall('roles_necesarios/role')
            roles_nombres = [role.find('role_name').text for role in roles if role.find('role_name').text]
            self.roles_str = ", ".join(roles_nombres)  # Mostrar como texto
            '''

            '''
            # Asignar roles
            roles = xml_root.findall('roles_necesarios/role')
            for role in roles:
                # Crear la relación de roles necesarios si no existe
                rol_id = self.env['hr.job'].search([('name', '=', role.text)], limit=1)
                if rol_id:
                    self.empleados_roles = [(4, rol_id.id)]
            '''

'''

            '''
            for equipo_tipo in equipo:
                equipo_id = self.env['malkion_equipo'].search([('name', '=', equipo_tipo.text)], limit=1)
                if equipo_id:
                    self.equipo_ids = [(4, equipo_id.id)]
            '''

                                    <!-- Campo Estado (editable para Agentes de Campo y Managers) No escalable, solución dinámica si grupos en código
                        <field name="estado" string="Estado"/>
                                                <field name="estado" 
                            groups="datamalkion.group_AGENTESCAMPO, datamalkion.group_MANAGER"
                            attrs="{'readonly': [('groups', 'not in', ['datamalkion.group_AGENTESCAMPO', 'datamalkion.group_MANAGER'])]}"/>

                            <field name="estado" groups="datamalkion.group_AGENTESCAMPO,datamalkion.group_MANAGER,datamalkion.group_ASCLEPIOS"/>

                        <field name="estado" 
                            groups="datamalkion.group_AGENTESCAMPO,datamalkion.group_MANAGER,datamalkion.group_ASCLEPIOS" 
                            attrs="{'readonly': [('user_has_group', '=', 'datamalkion.group_AGENTESCAMPO')]}"/>


                        <field name="estado"
                            groups="datamalkion.group_AGENTESCAMPO,datamalkion.group_MANAGER,datamalkion.group_ASCLEPIOS"
                            attrs="{'readonly': [('groups_id', 'not in', [ref('datamalkion.group_AGENTESCAMPO')])]}"/>

                        <field name="estado" 
                            attrs="{'readonly': [('user_id.groups_id', 'not in', [ref('datamalkion.group_AGENTESCAMPO')])]}"/>

                                                    <field name="estado" 
                            attrs="{'readonly': [('user_id.groups_id', 'not in', ['datamalkion.group_AGENTESCAMPO'])]}" 
                            groups="datamalkion.group_MANAGER,datamalkion.group_AGENTESCAMPO"/>
                        -->
   """ added por si acaso, no deberian crearse manualmente, solo desde orden trabajo"""
    @api.model
    def create(self, vals):
        mission = super().create(vals)

        if mission.responsable_equipo_id and mission.equipo_ids:
            for eq in mission.equipo_ids:
                self.env['malkion.mission_employee_team'].create({
                    'mision_id': mission.id,
                    'empleado_id': mission.responsable_equipo_id.id,
                    'equipo_id': eq.id,
                })

        if mission.responsable_transporte_id and mission.transporte_ids:
            for tr in mission.transporte_ids:
                self.env['malkion.mission_employee_transport'].create({
                    'mision_id': mission.id,
                    'empleado_id': mission.responsable_transporte_id.id,
                    'transporte_id': tr.id,
                })

        return mission
    
    





''' why falla esto? whyyyy? ok, domain de un many to many en un one2many que es la ternaria
        # Nuevos campos para responsables (lógica no de código (de negocio, vamos) no clara del todo pero bueno)
    responsables_equipo_ids = fields.Many2many(
        'hr.employee', 
        string="Responsables de Equipo", 
        domain="[('id', 'in', empleados_equipo_ids)]"
    )
    

    responsables_transporte_ids = fields.Many2many( 
        'hr.employee', 
        string="Responsables de Transporte", 
        domain="[('id', 'in', empleados_transporte_ids)]"
    )



    extra:
        @api.onchange('empleados_equipo_ids')
    def _onchange_empleados_equipo_ids(self):
        if self.empleados_equipo_ids:
            empleados_ids = self.empleados_equipo_ids.mapped('empleado_id').ids
            self.responsable_equipo_id = empleados_ids[0] if empleados_ids else False  # Asignar el primer empleado

    @api.onchange('empleados_transporte_ids')
    def _onchange_empleados_transporte_ids(self):
        if self.empleados_transporte_ids:
            empleados_ids = self.empleados_transporte_ids.mapped('empleado_id').ids
            self.responsable_transporte_id = empleados_ids[0] if empleados_ids else False


Con este casi iba el filtrado:

    @api.onchange('roles_ids')
    def _onchange_roles_ids(self):
        """
        Filtrar empleados en roles_ids para ser seleccionados como responsables de equipo o transporte.
        Este método actualizará los campos responsables según los empleados en roles_ids.
        """
        if self.roles_ids:
            empleados_ids = self.roles_ids.ids  # Obtener los IDs de los empleados en roles_ids
            _logger.info("Empleados en roles_ids: %s", empleados_ids)  # Verifica los IDs de empleados
            # Limpiar responsables antes de asignar nuevos valores
            self.responsable_equipo_id = False
            self.responsable_transporte_id = False
            # Ahora puedes elegir empleados para cada campo
            # Actualizamos el responsable de equipo con el primer empleado de roles_ids (solo si hay empleados)
            if empleados_ids:
                self.responsable_equipo_id = empleados_ids[0]
                self.responsable_transporte_id = empleados_ids[0]  # Usamos el primer empleado también para transporte si es necesario
'''